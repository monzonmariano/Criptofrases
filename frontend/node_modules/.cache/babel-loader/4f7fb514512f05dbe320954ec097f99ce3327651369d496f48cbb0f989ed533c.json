{"ast":null,"code":"// Archivo: src/utils/sanitizeInput.js\n//     Explicación del Proceso\n//     cryptogram.replace(/\\s*-\\s*/g, '-')\n//     Este paso busca cualquier guion (-) que tenga cero o más espacios (\\s*) a su alrededor y los reemplaza por un guion limpio.\n//     Ejemplo:\n//         \"1 - 2\" se convierte en \"1-2\".\n//         \"1-   2\" se convierte en \"1-2\".\n//         \"2    -3\" se convierte en \"2-3\".\n//     .trim().replace(/\\s+/g, ' ')\n//     Después del primer paso, la cadena ya no tiene espacios junto a los guiones, pero podría tener espacios extra entre las palabras y en los extremos.\n//     trim() elimina los espacios iniciales y finales.\n//     replace(/\\s+/g, ' ') busca una o más secuencias de espacios (\\s+) y las reemplaza con un solo espacio.\nexport const sanitizeInput=(cryptogram,clues)=>{// Primero, elimina todos los espacios que rodean a los guiones\n// y luego colapsa cualquier secuencia de espacios restante a un solo espacio.\nconst sanitizedCryptogram=cryptogram.replace(/\\s*-\\s*/g,'-').trim().replace(/\\s+/g,' ');// Mantiene la lógica para las pistas, eliminando todos los espacios.\nconst sanitizedClues=clues.trim().toLowerCase().replace(/\\s/g,'');return{sanitizedCryptogram,sanitizedClues};};","map":{"version":3,"names":["sanitizeInput","cryptogram","clues","sanitizedCryptogram","replace","trim","sanitizedClues","toLowerCase"],"sources":["/home/mariano/Criptofrases/frontend/src/utils/sanitizeInput.js"],"sourcesContent":["// Archivo: src/utils/sanitizeInput.js\n\n//     Explicación del Proceso\n\n//     cryptogram.replace(/\\s*-\\s*/g, '-')\n\n//     Este paso busca cualquier guion (-) que tenga cero o más espacios (\\s*) a su alrededor y los reemplaza por un guion limpio.\n\n//     Ejemplo:\n\n//         \"1 - 2\" se convierte en \"1-2\".\n\n//         \"1-   2\" se convierte en \"1-2\".\n\n//         \"2    -3\" se convierte en \"2-3\".\n\n//     .trim().replace(/\\s+/g, ' ')\n\n//     Después del primer paso, la cadena ya no tiene espacios junto a los guiones, pero podría tener espacios extra entre las palabras y en los extremos.\n\n//     trim() elimina los espacios iniciales y finales.\n\n//     replace(/\\s+/g, ' ') busca una o más secuencias de espacios (\\s+) y las reemplaza con un solo espacio.\n\n\n\n\n\nexport const sanitizeInput = (cryptogram, clues) => {\n  // Primero, elimina todos los espacios que rodean a los guiones\n  // y luego colapsa cualquier secuencia de espacios restante a un solo espacio.\n  const sanitizedCryptogram = cryptogram\n    .replace(/\\s*-\\s*/g, '-')\n    .trim()\n    .replace(/\\s+/g, ' ');\n\n  // Mantiene la lógica para las pistas, eliminando todos los espacios.\n  const sanitizedClues = clues.trim().toLowerCase().replace(/\\s/g, '');\n\n  return { sanitizedCryptogram, sanitizedClues };\n};\n\n\n\n"],"mappings":"AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAMA,MAAO,MAAM,CAAAA,aAAa,CAAGA,CAACC,UAAU,CAAEC,KAAK,GAAK,CAClD;AACA;AACA,KAAM,CAAAC,mBAAmB,CAAGF,UAAU,CACnCG,OAAO,CAAC,UAAU,CAAE,GAAG,CAAC,CACxBC,IAAI,CAAC,CAAC,CACND,OAAO,CAAC,MAAM,CAAE,GAAG,CAAC,CAEvB;AACA,KAAM,CAAAE,cAAc,CAAGJ,KAAK,CAACG,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACH,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAEpE,MAAO,CAAED,mBAAmB,CAAEG,cAAe,CAAC,CAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}