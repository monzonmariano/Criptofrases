{"ast":null,"code":"// Archivo: src/components/SolveCryptogramForm.jsx\nimport React,{useState}from'react';import{sanitizeInput}from'../utils/sanitizeInput';// Importamos la función de utilidad\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SolveCryptogramForm=_ref=>{let{userId,onNewInteraction}=_ref;const[cryptogram,setCryptogram]=useState('');const[clues,setClues]=useState('');const[solution,setSolution]=useState(null);const[isLoading,setIsLoading]=useState(false);const handleSubmit=async e=>{e.preventDefault();setIsLoading(true);setSolution(null);const{sanitizedCryptogram,sanitizedClues}=sanitizeInput(cryptogram,clues);try{const response=await fetch('/api/solve',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({cryptogram:sanitizedCryptogram,clues:sanitizedClues,user_id:userId})});const data=await response.json();if(!response.ok)throw new Error(data.error||'Error al resolver el criptograma');setSolution(data.solution);onNewInteraction();}catch(error){// Manejo de errores\nconsole.error(error);}finally{setIsLoading(false);}};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Resolver Criptograma\"}),/*#__PURE__*/_jsx(\"textarea\",{value:cryptogram,onChange:e=>setCryptogram(e.target.value),required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:clues,onChange:e=>setClues(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:isLoading,children:isLoading?'Resolviendo...':'Resolver'}),solution&&/*#__PURE__*/_jsxs(\"div\",{children:[\"Soluci\\xF3n: \",solution]})]});};export default SolveCryptogramForm;","map":{"version":3,"names":["React","useState","sanitizeInput","jsx","_jsx","jsxs","_jsxs","SolveCryptogramForm","_ref","userId","onNewInteraction","cryptogram","setCryptogram","clues","setClues","solution","setSolution","isLoading","setIsLoading","handleSubmit","e","preventDefault","sanitizedCryptogram","sanitizedClues","response","fetch","method","headers","body","JSON","stringify","user_id","data","json","ok","Error","error","console","onSubmit","children","value","onChange","target","required","type","disabled"],"sources":["/home/mariano/Criptofrases/frontend/src/components/SolveCryptogramForm.jsx"],"sourcesContent":["// Archivo: src/components/SolveCryptogramForm.jsx\nimport React, { useState } from 'react';\nimport { sanitizeInput } from '../utils/sanitizeInput'; // Importamos la función de utilidad\n\nconst SolveCryptogramForm = ({ userId, onNewInteraction }) => {\n  const [cryptogram, setCryptogram] = useState('');\n  const [clues, setClues] = useState('');\n  const [solution, setSolution] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setSolution(null);\n    \n    const { sanitizedCryptogram, sanitizedClues } = sanitizeInput(cryptogram, clues);\n\n    try {\n      const response = await fetch('/api/solve', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          cryptogram: sanitizedCryptogram,\n          clues: sanitizedClues,\n          user_id: userId\n        }),\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.error || 'Error al resolver el criptograma');\n      setSolution(data.solution);\n      onNewInteraction();\n    } catch (error) {\n      // Manejo de errores\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Resolver Criptograma</h2>\n      <textarea\n        value={cryptogram}\n        onChange={(e) => setCryptogram(e.target.value)}\n        required\n      />\n      <input\n        type=\"text\"\n        value={clues}\n        onChange={(e) => setClues(e.target.value)}\n      />\n      <button type=\"submit\" disabled={isLoading}>\n        {isLoading ? 'Resolviendo...' : 'Resolver'}\n      </button>\n      {solution && <div>Solución: {solution}</div>}\n    </form>\n  );\n};\n\nexport default SolveCryptogramForm;"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,aAAa,KAAQ,wBAAwB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExD,KAAM,CAAAC,mBAAmB,CAAGC,IAAA,EAAkC,IAAjC,CAAEC,MAAM,CAAEC,gBAAiB,CAAC,CAAAF,IAAA,CACvD,KAAM,CAACG,UAAU,CAAEC,aAAa,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACY,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACc,QAAQ,CAAEC,WAAW,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAC9C,KAAM,CAACgB,SAAS,CAAEC,YAAY,CAAC,CAAGjB,QAAQ,CAAC,KAAK,CAAC,CAEjD,KAAM,CAAAkB,YAAY,CAAG,KAAO,CAAAC,CAAC,EAAK,CAChCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClBH,YAAY,CAAC,IAAI,CAAC,CAClBF,WAAW,CAAC,IAAI,CAAC,CAEjB,KAAM,CAAEM,mBAAmB,CAAEC,cAAe,CAAC,CAAGrB,aAAa,CAACS,UAAU,CAAEE,KAAK,CAAC,CAEhF,GAAI,CACF,KAAM,CAAAW,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,YAAY,CAAE,CACzCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBnB,UAAU,CAAEW,mBAAmB,CAC/BT,KAAK,CAAEU,cAAc,CACrBQ,OAAO,CAAEtB,MACX,CAAC,CACH,CAAC,CAAC,CACF,KAAM,CAAAuB,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClC,GAAI,CAACT,QAAQ,CAACU,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAACH,IAAI,CAACI,KAAK,EAAI,kCAAkC,CAAC,CACnFpB,WAAW,CAACgB,IAAI,CAACjB,QAAQ,CAAC,CAC1BL,gBAAgB,CAAC,CAAC,CACpB,CAAE,MAAO0B,KAAK,CAAE,CACd;AACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CACtB,CAAC,OAAS,CACRlB,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,mBACEZ,KAAA,SAAMgC,QAAQ,CAAEnB,YAAa,CAAAoB,QAAA,eAC3BnC,IAAA,OAAAmC,QAAA,CAAI,sBAAoB,CAAI,CAAC,cAC7BnC,IAAA,aACEoC,KAAK,CAAE7B,UAAW,CAClB8B,QAAQ,CAAGrB,CAAC,EAAKR,aAAa,CAACQ,CAAC,CAACsB,MAAM,CAACF,KAAK,CAAE,CAC/CG,QAAQ,MACT,CAAC,cACFvC,IAAA,UACEwC,IAAI,CAAC,MAAM,CACXJ,KAAK,CAAE3B,KAAM,CACb4B,QAAQ,CAAGrB,CAAC,EAAKN,QAAQ,CAACM,CAAC,CAACsB,MAAM,CAACF,KAAK,CAAE,CAC3C,CAAC,cACFpC,IAAA,WAAQwC,IAAI,CAAC,QAAQ,CAACC,QAAQ,CAAE5B,SAAU,CAAAsB,QAAA,CACvCtB,SAAS,CAAG,gBAAgB,CAAG,UAAU,CACpC,CAAC,CACRF,QAAQ,eAAIT,KAAA,QAAAiC,QAAA,EAAK,eAAU,CAACxB,QAAQ,EAAM,CAAC,EACxC,CAAC,CAEX,CAAC,CAED,cAAe,CAAAR,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}